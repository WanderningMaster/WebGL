// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;

uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 scale;

varying vec3 vNormal;
varying vec3 vEyePos;
void main() {
    vec3 scaled = vertex * scale;

    vec4 eyePos = ModelViewMatrix * vec4(scaled, 1.0);
    vEyePos = eyePos.xyz;

    vNormal = normalize(NormalMatrix * normal);

    gl_Position = ModelViewProjectionMatrix * vec4(scaled, 1.0);
}
`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 vNormal;
varying vec3 vEyePos;

uniform vec4 color;
uniform vec3 lightDir;

uniform float Ka;
uniform float Kd;
uniform float Ks;
uniform float Sh;
void main() {
	vec3 N = normalize(vNormal);
	vec3 L = normalize(lightDir);
	vec3 V = normalize(-vEyePos);

	vec3 ambient = Ka * color.rgb;

	float lambertian = max(dot(N, L), 0.0);
	vec3 diffuse = Kd * color.rgb * lambertian;

	vec3 R = reflect(-L, N);
	float spec = 0.0;
	if(lambertian > 0.0) {
		spec = pow(max(dot(R, V), 0.0), Sh);
	}
	vec3 specular = Ks * color.rgb * spec;

	vec3 finalColor = ambient + diffuse + specular;
	gl_FragColor = vec4(finalColor.rgb, 1.0);
}`;
